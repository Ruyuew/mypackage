[{"path":"/articles/mypackage.html","id":"introduction","dir":"Articles","previous_headings":"","what":"Introduction","title":"Getting Started with MyPackage","text":"vignette demonstrates use mypackage functions.","code":""},{"path":"/articles/mypackage.html","id":"generating-data","dir":"Articles","previous_headings":"","what":"Generating Data","title":"Getting Started with MyPackage","text":"first generate example data:","code":"set.seed(123) data <- matrix(sample(0:1, 100, replace = TRUE), 10, 10) data[lower.tri(data)] <- t(data)[lower.tri(data)] diag(data) <- 1"},{"path":[]},{"path":"/articles/mypackage.html","id":"function-1","dir":"Articles","previous_headings":"Using the Functions","what":"Function 1","title":"Getting Started with MyPackage","text":"","code":"result1 <- compute_maximal_partial_clique1(data, alpha=0.7, method=\"simple\") print(result1) ## $clique_idx ## [1]  1  2  4  5  9 10 ##  ## $edge_density ## [1] 0.7333333"},{"path":"/articles/mypackage.html","id":"function-2","dir":"Articles","previous_headings":"Using the Functions","what":"Function 2","title":"Getting Started with MyPackage","text":"","code":"result2 <- compute_maximal_partial_clique2(data, alpha=0.7) print(result2) ## $clique_idx ## [1] 1 6 7 8 9 ##  ## $edge_density ## [1] 0.7"},{"path":"/articles/mypackage.html","id":"function-3","dir":"Articles","previous_headings":"Using the Functions","what":"Function 3","title":"Getting Started with MyPackage","text":"","code":"result3 <- compute_maximal_partial_clique3(data, alpha=0.7) print(result3) ## $clique_idx ## [1]  1  8  9  2 10 ##  ## $edge_density ## [1] 0.7"},{"path":"/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"package maintainer. Maintainer.","code":""},{"path":"/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Ruyuew (2024). “mypackage.” 1, 1(1), 1. doi:ddd1212.","code":"@Article{,   title = {mypackage},   author = {{Ruyuew}},   journal = {1},   year = {2024},   volume = {1},   number = {1},   pages = {1},   doi = {ddd1212}, }"},{"path":"/index.html","id":"mypackage","dir":"","previous_headings":"","what":"What the Package Does (Title Case)","title":"What the Package Does (Title Case)","text":"example R package.","code":""},{"path":"/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"What the Package Does (Title Case)","text":"can install development version GitHub:","code":"# if (!require('devtools')) install.packages('devtools') devtools::install_github('yourusername/mypackage')"},{"path":"/index.html","id":"usage","dir":"","previous_headings":"","what":"Usage","title":"What the Package Does (Title Case)","text":"","code":"library(mypackage) set.seed(123) data <- matrix(sample(0:1, 100, replace = TRUE), 10, 10) data[lower.tri(data)] <- t(data)[lower.tri(data)] diag(data) <- 1 result1 <- compute_maximal_partial_clique1(data, alpha=0.7, method=\"simple\") result2 <- compute_maximal_partial_clique2(data, alpha=0.7) result3 <- compute_maximal_partial_clique3(data, alpha=0.7) print(result1) print(result2) print(result3)"},{"path":"/index.html","id":"links","dir":"","previous_headings":"","what":"Links","title":"What the Package Does (Title Case)","text":"GitHub Repository PkgDown Website","code":""},{"path":"/reference/compute_maximal_partial_clique1.html","id":null,"dir":"Reference","previous_headings":"","what":"Compute maximal partial clique — compute_maximal_partial_clique1","title":"Compute maximal partial clique — compute_maximal_partial_clique1","text":"Determines indices corresponding maximal partial clique adjacency matrix given partial clique density. function uses modified versions Bron-Kerbosch algorithm, designed compute maximal full cliques, compute maximal partial cliques, allowing users specify `\"simple\"` `\"pivot\"` (Bron & Kerbosch 1973). Specifically, `alpha` < 1, algorithm modified candidate excluded nodes iteration restricted neighbors. Rather, candidate clique initially reported maximal clique satisfies density `alpha/2` (help find cliques two nodes alone satisfy alpha density, together clique ), searches final results choose largest clique satisfies `alpha`. `alpha = 1` set, Bron-Kerbosch algorithm applied directly.","code":""},{"path":"/reference/compute_maximal_partial_clique1.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Compute maximal partial clique — compute_maximal_partial_clique1","text":"","code":"compute_maximal_partial_clique1(adj_mat, alpha, method = c(\"simple\", \"pivot\"))"},{"path":"/reference/compute_maximal_partial_clique1.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Compute maximal partial clique — compute_maximal_partial_clique1","text":"adj_mat symmetric adjacency matrix 5-50 rows columns. alpha numeric value 0.5 1 (inclusive) indicating minimum fraction edges among nodes outputted partial clique. method One `\"simple\"` `\"pivot\"`. `\"simple\"` searches maximal partial clique using modified version original Bron-Kerbosch algorithm, `\"pivot\"` uses modified version Bron-Kerbosch algorithm pivot (Bron & Kerbosch 1973).","code":""},{"path":"/reference/compute_maximal_partial_clique1.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Compute maximal partial clique — compute_maximal_partial_clique1","text":"Outputs list containing clique_idx: vector indices form partial clique edge_density: Percentage edges `adj_mat` among nodes `clique_idx`.","code":""},{"path":"/reference/compute_maximal_partial_clique1.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Compute maximal partial clique — compute_maximal_partial_clique1","text":"Bron, C., & Kerbosch, J. (1973). Algorithm 457: finding cliques undirected graph. Communications ACM, 16(9), 575-577.","code":""},{"path":"/reference/compute_maximal_partial_clique1.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Compute maximal partial clique — compute_maximal_partial_clique1","text":"","code":"data <- matrix(sample(0:1, 100, replace = TRUE), 10, 10) data[lower.tri(data)] <- t(data)[lower.tri(data)] diag(data) <- 1 result <- compute_maximal_partial_clique1(data, alpha=0.7, method=\"simple\")"},{"path":"/reference/compute_maximal_partial_clique2.html","id":null,"dir":"Reference","previous_headings":"","what":"Compute the largest partial clique given an adjacency matrix and a required edge density — compute_maximal_partial_clique2","title":"Compute the largest partial clique given an adjacency matrix and a required edge density — compute_maximal_partial_clique2","text":"Compute largest partial clique given adjacency matrix required edge density","code":""},{"path":"/reference/compute_maximal_partial_clique2.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Compute the largest partial clique given an adjacency matrix and a required edge density — compute_maximal_partial_clique2","text":"","code":"compute_maximal_partial_clique2(adj_mat, alpha)"},{"path":"/reference/compute_maximal_partial_clique2.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Compute the largest partial clique given an adjacency matrix and a required edge density — compute_maximal_partial_clique2","text":"adj_mat adjacency matrix values 0 1 alpha required edge density","code":""},{"path":"/reference/compute_maximal_partial_clique2.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Compute the largest partial clique given an adjacency matrix and a required edge density — compute_maximal_partial_clique2","text":"list index numbers corresponding nodes maximal partial clique","code":""},{"path":"/reference/compute_maximal_partial_clique2.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Compute the largest partial clique given an adjacency matrix and a required edge density — compute_maximal_partial_clique2","text":"","code":"data <- matrix(sample(0:1, 100, replace = TRUE), 10, 10) data[lower.tri(data)] <- t(data)[lower.tri(data)] diag(data) <- 1 result <- compute_maximal_partial_clique2(data, alpha=0.7)"},{"path":"/reference/compute_maximal_partial_clique3.html","id":null,"dir":"Reference","previous_headings":"","what":"Compute maximal partial clique using a heuristic approach — compute_maximal_partial_clique3","title":"Compute maximal partial clique using a heuristic approach — compute_maximal_partial_clique3","text":"Compute maximal partial clique using heuristic approach","code":""},{"path":"/reference/compute_maximal_partial_clique3.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Compute maximal partial clique using a heuristic approach — compute_maximal_partial_clique3","text":"","code":"compute_maximal_partial_clique3(adj_mat, alpha, max_iteration = 1000)"},{"path":"/reference/compute_maximal_partial_clique3.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Compute maximal partial clique using a heuristic approach — compute_maximal_partial_clique3","text":"adj_mat symmetrical matrix 0s 1s. diagonal must 1s must 5 50 rows. alpha prespecified density can accept partially connected clique. max_iteration Maximum number iterations.","code":""},{"path":"/reference/compute_maximal_partial_clique3.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Compute maximal partial clique using a heuristic approach — compute_maximal_partial_clique3","text":"list containing number nodes included maximal partial clique actual density clique.","code":""},{"path":"/reference/compute_maximal_partial_clique3.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Compute maximal partial clique using a heuristic approach — compute_maximal_partial_clique3","text":"","code":"data <- matrix(sample(0:1, 100, replace = TRUE), 10, 10) data[lower.tri(data)] <- t(data)[lower.tri(data)] diag(data) <- 1 result <- compute_maximal_partial_clique3(data, alpha=0.7)"},{"path":"/reference/hello.html","id":null,"dir":"Reference","previous_headings":"","what":"Hello, World! — hello","title":"Hello, World! — hello","text":"Prints 'Hello, world!'.","code":""},{"path":"/reference/hello.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Hello, World! — hello","text":"","code":"hello()"},{"path":"/reference/hello.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Hello, World! — hello","text":"","code":"hello() #> Error in hello(): could not find function \"hello\""},{"path":"/reference/mypackage-package.html","id":null,"dir":"Reference","previous_headings":"","what":"mypackage: What the Package Does (Title Case) — mypackage-package","title":"mypackage: What the Package Does (Title Case) — mypackage-package","text":"(maybe one line) Use four spaces indenting paragraphs within Description.","code":""}]
